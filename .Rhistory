1+1
example<- matrix(c(1,2,3,4,5,6,7,8),nrow=4,ncol =2 )
View(example)
example<- matrix(r(1,2,3,4,5,6,7,8),nrow=4,ncol =2 )
savehistory("~/nib.R")
example<- matrix(r(1,2,3,4,5,6,7,8),nrow=4,ncol =2 )
help() iris
library("swirl")
swirl()
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
!5!=7
5==7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FLASE, FALSE)
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5>8 || 6!=8 && 4>3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2, 4, 5))
submit()
submit()
boring_function('My first function')
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
submit()
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor=11, num=5)
remainder(4,div=2)
args(remainder)
submit()
evaluate(c(1.4,3.6,7.9,8.8))
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1}, 6)
evaluate(c(8, 4, 0), anonymous(x))
evaluate(head,c(8, 4, 0), anonymous(x))
evaluate(head,c(8, 4, 0))
anonymous(x)
evaluate(anonymous(x){x[1]},c(8,4,0))
evaluate(anonymous(x){x[1]}, c(8,4,0))
evaluate(anonymous(x, c(8,4,0))
d
evaluate(anonymous(x), c(8,4,0))
evaluate(anonymous(x){}, c(8,4,0))
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[3]}, c(8,4,0))
evaluate(function(x){tail(x,1)}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
telegram("TRUMP")
submit()
submit()
submit()
mad_libs("pune", "hey", "Numair")
submit()
submit()
`'I' %p 'love' %p 'R'`
`'I' %p% 'love' %p% 'R'`
`'I' %p% '`'love'%p%'R'`'`
`'I' %p 'love' %p 'R!'`
`'I' %p% 'love' %p% 'R!'`
'I' %p% 'love' %p% 'R!'
d1 <- Sys.Date()
class(dl)
class(d1)
unclass(d1)
d1
d2 <- as.date("1969-01-01")
d2 <- as.Date("1969-01-01")
unclass(d2)
t1<- Sys.time()
t1
class(t1)
unclass(t1)
as.POSIXlt(Sys.time())
t2 <-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(dl)
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time(0>t1
t1
Sys.time()>t1
Sys.time()-t1
difftime(Sys.time(), t1, units = 'days')
q()
x <- 1:10
if(x>5) {
x <- 0
}
x
f <- function (x) {
g <- function (y) {
y+z
}
z <- 4
x+g(x)
}
z <- 10
f(3)
cube <- function(x, n) {
x^3
}
cube(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
q()
x <- list(a=matrix(1:4,2,2), b=matrix(1:6,3,2))
x
lapply(x,function(elt), elt[, 1])
lapply(x,function(elt) elt[, 1])
matrix(rep(1),3,3)
x<- list(matrix(rep(1),3,3))
lapply(x,det)
a <- c(1,2,3,4,5,6,7,8)
b <- c(1,3,5,7,9,11,13)
mapply(mean,a,b)
b <- c(1,3,5,7,9,11,13,15)
mapply(mean,a,b)
x<-list(a=c(1,2), b=c(1,2,3))
y<-list(a=c(10,20), b=c(10,20,30))
mapply(mean,x,y)
firstList  <- list(a = 1:3, b = 4:6)
secondList <- list(c = 7:9, d = 10:12)
mapply(mean, firstList, secondList)
mapply(mean, c(firstList, secondList))
q()
dir()
dir()
source("cachematrix.R")
source("cachematrix.R")
source("cachematrix.R")
m1 <- makeCacheMatrix(m)
m <- matrix(rnorm(16),4,4)
m1 <- makeCacheMatrix(m)
cacheSolve(m1)
m1 <- makeCacheMatrix(m)
cacheSolve(m1)
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
cacheSolve(my_matrix)
my_matrix$getInverse()
q()
